# Generated by Django 5.2.6 on 2025-09-13 19:48

from django.db import migrations


def populate_system_wide_configuration(apps, schema_editor):
    """Populate system-wide configuration data for all modules"""
    SystemFieldRequirement = apps.get_model('requests', 'SystemFieldRequirement')
    SystemFormLayout = apps.get_model('requests', 'SystemFormLayout')
    
    # Sales Calls Field Requirements
    sales_call_fields = [
        ('sales_calls.SalesCall', 'account', 'Account', 'Visit Information', True, True, 1),
        ('sales_calls.SalesCall', 'visit_date', 'Visit Date', 'Visit Information', True, True, 2),
        ('sales_calls.SalesCall', 'city', 'City', 'Visit Information', True, True, 3),
        ('sales_calls.SalesCall', 'address', 'Address', 'Visit Information', False, True, 4),
        ('sales_calls.SalesCall', 'meeting_subject', 'Meeting Subject', 'Meeting Details', True, True, 1),
        ('sales_calls.SalesCall', 'business_potential', 'Business Potential', 'Meeting Details', False, True, 2),
        ('sales_calls.SalesCall', 'detailed_notes', 'Detailed Notes', 'Meeting Details', False, True, 3),
        ('sales_calls.SalesCall', 'next_steps', 'Next Steps', 'Meeting Details', False, True, 4),
        ('sales_calls.SalesCall', 'follow_up_required', 'Follow-up Required', 'Follow-up', False, True, 1),
        ('sales_calls.SalesCall', 'follow_up_date', 'Follow-up Date', 'Follow-up', False, True, 2),
        ('sales_calls.SalesCall', 'follow_up_completed', 'Follow-up Completed', 'Follow-up', False, True, 3),
    ]
    
    # Agreements Field Requirements
    agreement_fields = [
        ('agreements.Agreement', 'account', 'Account', 'Agreement Details', True, True, 1),
        ('agreements.Agreement', 'rate_type', 'Rate Type', 'Agreement Details', True, True, 2),
        ('agreements.Agreement', 'start_date', 'Start Date', 'Agreement Details', True, True, 3),
        ('agreements.Agreement', 'end_date', 'End Date', 'Agreement Details', True, True, 4),
        ('agreements.Agreement', 'return_deadline', 'Return Deadline', 'Agreement Details', True, True, 5),
        ('agreements.Agreement', 'status', 'Status', 'Status & File', True, True, 1),
        ('agreements.Agreement', 'agreement_file', 'Agreement File', 'Status & File', False, True, 2),
        ('agreements.Agreement', 'notes', 'Notes', 'Notes & Metadata', False, True, 1),
    ]
    
    # Accounts Field Requirements
    account_fields = [
        ('accounts.Account', 'name', 'Account Name', 'Basic Information', True, True, 1),
        ('accounts.Account', 'account_type', 'Account Type', 'Basic Information', True, True, 2),
        ('accounts.Account', 'contact_person', 'Contact Person', 'Contact Information', True, True, 1),
        ('accounts.Account', 'email', 'Email', 'Contact Information', False, True, 2),
        ('accounts.Account', 'phone', 'Phone', 'Contact Information', False, True, 3),
        ('accounts.Account', 'address', 'Address', 'Contact Information', False, True, 4),
        ('accounts.Account', 'city', 'City', 'Contact Information', False, True, 5),
        ('accounts.Account', 'country', 'Country', 'Contact Information', False, True, 6),
    ]
    
    # Create field requirements for all modules
    all_fields = sales_call_fields + agreement_fields + account_fields
    
    for form_type, field_name, field_label, section_name, required, enabled, sort_order in all_fields:
        module = form_type.split('.')[0]
        SystemFieldRequirement.objects.get_or_create(
            form_type=form_type,
            field_name=field_name,
            defaults={
                'module': module,
                'field_label': field_label,
                'section_name': section_name,
                'required': required,
                'enabled': enabled,
                'sort_order': sort_order,
                'help_text': f'Configure {field_label.lower()} for {form_type.split(".")[-1]}'
            }
        )
    
    # Create default form layouts
    form_layouts = [
        ('sales_calls', 'sales_calls.SalesCall', [
            {'name': 'Visit Information', 'fields': ['account', 'visit_date', 'city', 'address'], 'order': 1, 'collapsed': False},
            {'name': 'Meeting Details', 'fields': ['meeting_subject', 'business_potential', 'detailed_notes', 'next_steps'], 'order': 2, 'collapsed': False},
            {'name': 'Follow-up', 'fields': ['follow_up_required', 'follow_up_date', 'follow_up_completed'], 'order': 3, 'collapsed': False}
        ]),
        ('agreements', 'agreements.Agreement', [
            {'name': 'Agreement Details', 'fields': ['account', 'rate_type', 'start_date', 'end_date', 'return_deadline'], 'order': 1, 'collapsed': False},
            {'name': 'Status & File', 'fields': ['status', 'agreement_file'], 'order': 2, 'collapsed': False},
            {'name': 'Notes & Metadata', 'fields': ['notes'], 'order': 3, 'collapsed': True}
        ]),
        ('accounts', 'accounts.Account', [
            {'name': 'Basic Information', 'fields': ['name', 'account_type'], 'order': 1, 'collapsed': False},
            {'name': 'Contact Information', 'fields': ['contact_person', 'email', 'phone', 'address', 'city', 'country'], 'order': 2, 'collapsed': False}
        ])
    ]
    
    for module, form_type, sections in form_layouts:
        SystemFormLayout.objects.get_or_create(
            form_type=form_type,
            defaults={
                'module': module,
                'sections': sections,
                'active': True,
                'updated_by': 'system_migration'
            }
        )


def reverse_populate_system_wide_configuration(apps, schema_editor):
    """Reverse the population of system configuration"""
    SystemFieldRequirement = apps.get_model('requests', 'SystemFieldRequirement')
    SystemFormLayout = apps.get_model('requests', 'SystemFormLayout')
    
    # Clear all system configuration data
    SystemFieldRequirement.objects.all().delete()
    SystemFormLayout.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('requests', '0008_systemfieldrequirement_systemformlayout_and_more'),
    ]

    operations = [
        migrations.RunPython(
            populate_system_wide_configuration,
            reverse_populate_system_wide_configuration,
        ),
    ]
