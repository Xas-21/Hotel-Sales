# Generated by Django 4.2.16 on 2025-09-16 12:34

from django.db import migrations
from django.utils.text import slugify


def backfill_room_types_and_occupancies(apps, schema_editor):
    """
    Backfill room_type and occupancy_type ForeignKey fields from legacy category and occupancy fields.
    Creates missing RoomType and RoomOccupancy entries if needed.
    """
    RoomType = apps.get_model('requests', 'RoomType')
    RoomOccupancy = apps.get_model('requests', 'RoomOccupancy')
    RoomEntry = apps.get_model('requests', 'RoomEntry')
    SeriesRoomEntry = apps.get_model('requests', 'SeriesRoomEntry')
    
    # Legacy choices for mapping
    ROOM_CATEGORIES = [
        ('Superior', 'Superior'),
        ('Deluxe', 'Deluxe'),
        ('Executive', 'Executive'),
        ('Villa with Garden', 'Villa with Garden'),
        ('Villa with Pool', 'Villa with Pool'),
    ]
    
    OCCUPANCY_TYPES = [
        ('Single', 'Single'),
        ('Double', 'Double'),
        ('Twin', 'Twin'),
    ]
    
    # Create missing RoomType entries
    for code, name in ROOM_CATEGORIES:
        room_type, created = RoomType.objects.get_or_create(
            name=name,
            defaults={
                'code': slugify(name).replace('-', '_').upper()[:50],
                'description': f'Migrated from legacy {name} category',
                'active': True,
                'sort_order': 0
            }
        )
        if created:
            print(f"Created RoomType: {name}")
    
    # Create missing RoomOccupancy entries
    for code, label in OCCUPANCY_TYPES:
        # Default pax counts based on occupancy type
        pax_count = 1 if label == 'Single' else 2
        
        occupancy, created = RoomOccupancy.objects.get_or_create(
            label=label,
            defaults={
                'code': slugify(label).replace('-', '_').upper()[:50],
                'pax_count': pax_count,
                'description': f'Migrated from legacy {label} occupancy',
                'active': True,
                'sort_order': 0
            }
        )
        if created:
            print(f"Created RoomOccupancy: {label} ({pax_count} pax)")
    
    # Backfill RoomEntry records
    room_entries_updated = 0
    for room_entry in RoomEntry.objects.filter(room_type__isnull=True, occupancy_type__isnull=True):
        # Find matching RoomType
        try:
            room_type = RoomType.objects.get(name=room_entry.category)
            room_entry.room_type = room_type
        except RoomType.DoesNotExist:
            print(f"Warning: RoomType '{room_entry.category}' not found for RoomEntry {room_entry.id}")
            continue
            
        # Find matching RoomOccupancy  
        try:
            occupancy_type = RoomOccupancy.objects.get(label=room_entry.occupancy)
            room_entry.occupancy_type = occupancy_type
        except RoomOccupancy.DoesNotExist:
            print(f"Warning: RoomOccupancy '{room_entry.occupancy}' not found for RoomEntry {room_entry.id}")
            continue
            
        room_entry.save()
        room_entries_updated += 1
    
    print(f"Backfilled {room_entries_updated} RoomEntry records")
    
    # Backfill SeriesRoomEntry records
    series_room_entries_updated = 0
    for series_room_entry in SeriesRoomEntry.objects.filter(room_type__isnull=True, occupancy_type__isnull=True):
        # Find matching RoomType
        try:
            room_type = RoomType.objects.get(name=series_room_entry.category)
            series_room_entry.room_type = room_type
        except RoomType.DoesNotExist:
            print(f"Warning: RoomType '{series_room_entry.category}' not found for SeriesRoomEntry {series_room_entry.id}")
            continue
            
        # Find matching RoomOccupancy
        try:
            occupancy_type = RoomOccupancy.objects.get(label=series_room_entry.occupancy)
            series_room_entry.occupancy_type = occupancy_type
        except RoomOccupancy.DoesNotExist:
            print(f"Warning: RoomOccupancy '{series_room_entry.occupancy}' not found for SeriesRoomEntry {series_room_entry.id}")
            continue
            
        series_room_entry.save()
        series_room_entries_updated += 1
    
    print(f"Backfilled {series_room_entries_updated} SeriesRoomEntry records")


def reverse_backfill_room_types_and_occupancies(apps, schema_editor):
    """
    Reverse migration: clear the ForeignKey fields if needed
    """
    RoomEntry = apps.get_model('requests', 'RoomEntry')
    SeriesRoomEntry = apps.get_model('requests', 'SeriesRoomEntry')
    
    RoomEntry.objects.all().update(room_type=None, occupancy_type=None)
    SeriesRoomEntry.objects.all().update(room_type=None, occupancy_type=None)


class Migration(migrations.Migration):

    dependencies = [
        ('requests', '0014_add_enhanced_fields'),
    ]

    operations = [
        migrations.RunPython(
            backfill_room_types_and_occupancies,
            reverse_backfill_room_types_and_occupancies
        ),
    ]