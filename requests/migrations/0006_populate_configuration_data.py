# Generated by Django 5.2.6 on 2025-09-13 19:31

from django.db import migrations


def populate_lookup_tables(apps, schema_editor):
    """Populate configuration tables with existing choices and map existing data"""
    RoomType = apps.get_model('requests', 'RoomType')
    RoomOccupancy = apps.get_model('requests', 'RoomOccupancy')
    CancellationReason = apps.get_model('requests', 'CancellationReason')
    RoomEntry = apps.get_model('requests', 'RoomEntry')
    SeriesRoomEntry = apps.get_model('requests', 'SeriesRoomEntry')
    
    # Create Room Types from existing categories
    room_types_data = [
        ('SUP', 'Superior', 'Standard superior room', 1),
        ('DLX', 'Deluxe', 'Deluxe room with enhanced amenities', 2),
        ('EXE', 'Executive', 'Executive room with premium features', 3),
        ('VGD', 'Villa with Garden', 'Private villa with garden view', 4),
        ('VPL', 'Villa with Pool', 'Private villa with pool access', 5),
    ]
    
    for code, name, description, sort_order in room_types_data:
        RoomType.objects.get_or_create(
            code=code,
            defaults={
                'name': name,
                'description': description,
                'sort_order': sort_order,
                'active': True
            }
        )
    
    # Create Room Occupancies from existing types
    occupancy_data = [
        ('SGL', 'Single', 1, 'Single occupancy room', 1),
        ('DBL', 'Double', 2, 'Double occupancy room', 2),
        ('TWN', 'Twin', 2, 'Twin bed room', 3),
    ]
    
    for code, label, pax_count, description, sort_order in occupancy_data:
        RoomOccupancy.objects.get_or_create(
            code=code,
            defaults={
                'label': label,
                'pax_count': pax_count,
                'description': description,
                'sort_order': sort_order,
                'active': True
            }
        )
    
    # Create default cancellation reasons
    cancellation_reasons_data = [
        ('CLIENT_REQ', 'Client requested cancellation', False, 1),
        ('FORCE_MAJ', 'Force majeure (natural disaster, emergency)', True, 2),
        ('HOTEL_ISSUE', 'Hotel operational issues', True, 3),
        ('PAYMENT_FAIL', 'Payment failure', False, 4),
        ('DUPLICATE', 'Duplicate booking', True, 5),
        ('NO_SHOW', 'No show', False, 6),
        ('MEDICAL', 'Medical emergency', True, 7),
        ('TRAVEL_REST', 'Travel restrictions', True, 8),
        ('OTHER', 'Other reason', False, 9),
    ]
    
    for code, label, is_refundable, sort_order in cancellation_reasons_data:
        CancellationReason.objects.get_or_create(
            code=code,
            defaults={
                'label': label,
                'is_refundable': is_refundable,
                'sort_order': sort_order,
                'active': True
            }
        )
    
    # Map existing room entries to new foreign keys
    category_mapping = {
        'Superior': 'SUP',
        'Deluxe': 'DLX',
        'Executive': 'EXE',
        'Villa with Garden': 'VGD',
        'Villa with Pool': 'VPL',
    }
    
    occupancy_mapping = {
        'Single': 'SGL',
        'Double': 'DBL',
        'Twin': 'TWN',
    }
    
    # Update RoomEntry foreign keys
    for room_entry in RoomEntry.objects.all():
        if room_entry.category in category_mapping:
            room_type = RoomType.objects.get(code=category_mapping[room_entry.category])
            room_entry.room_type = room_type
        
        if room_entry.occupancy in occupancy_mapping:
            occupancy_type = RoomOccupancy.objects.get(code=occupancy_mapping[room_entry.occupancy])
            room_entry.occupancy_type = occupancy_type
        
        room_entry.save()
    
    # Update SeriesRoomEntry foreign keys  
    for series_room_entry in SeriesRoomEntry.objects.all():
        if series_room_entry.category in category_mapping:
            room_type = RoomType.objects.get(code=category_mapping[series_room_entry.category])
            series_room_entry.room_type = room_type
        
        if series_room_entry.occupancy in occupancy_mapping:
            occupancy_type = RoomOccupancy.objects.get(code=occupancy_mapping[series_room_entry.occupancy])
            series_room_entry.occupancy_type = occupancy_type
        
        series_room_entry.save()


def reverse_populate_lookup_tables(apps, schema_editor):
    """Reverse the population of lookup tables"""
    RoomType = apps.get_model('requests', 'RoomType')
    RoomOccupancy = apps.get_model('requests', 'RoomOccupancy')
    CancellationReason = apps.get_model('requests', 'CancellationReason')
    RoomEntry = apps.get_model('requests', 'RoomEntry')
    SeriesRoomEntry = apps.get_model('requests', 'SeriesRoomEntry')
    
    # Clear foreign key references
    RoomEntry.objects.update(room_type=None, occupancy_type=None)
    SeriesRoomEntry.objects.update(room_type=None, occupancy_type=None)
    
    # Delete created records
    RoomType.objects.all().delete()
    RoomOccupancy.objects.all().delete()
    CancellationReason.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('requests', '0005_add_configuration_models'),
    ]

    operations = [
        migrations.RunPython(
            populate_lookup_tables,
            reverse_populate_lookup_tables,
        ),
    ]
